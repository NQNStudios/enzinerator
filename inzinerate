#! /bin/bash

# TODO verify that the convert command is installed. If not,
# print a message that ImageMagick v7 is required

dpi=300
page_width=$((dpi*11))
page_height=$(echo "$dpi * 8.5 / 1" | bc)

input_directory=${1:-"test-pages"}
extension=${2:-".jpg"}

# Useful functions
abs () {
    square=$(echo "$1 * $1" | bc)
    root=$(echo "sqrt ( $square )" | bc)
    echo $root
}

# Page tiling for an 8-page single-sheet zine is like so,
# with negative numbers representing a 180degree rotation
# (i.e. `convert -flip -flop`)
pages=1
tile_rows=2
tile_columns=4
page_tiles=(-1 -8 -7 -6 2 3 4 5)

# TODO allow for folio zine tiling which would dynamically produce something like this:
# (((1 8)) ((2 7)) ((3 6)) ((4 5)))

tile_width=$(echo "$page_width / $tile_columns" | bc)
tile_height=$(echo "$page_height / $tile_rows" | bc)


clean_command="rm"

# Tile each page together
for page_num in `seq 1 $pages`; do
    append_rows_command="convert"

    for row_num in `seq 1 $tile_rows`; do
        append_columns_command="convert"
        for column_num in `seq 1 $tile_columns`; do
            tile_index=$(((row_num-1) * tile_columns + column_num-1))

            source_image_path="$input_directory/page$(abs ${page_tiles[$tile_index]})$extension"
            temp_image_path="tile$(abs ${page_tiles[$tile_index]})$extension"
            clean_command="$clean_command $temp_image_path"
            # Resize the image so it will fit
            convert $source_image_path -resize "${tile_width}x${tile_height}" $temp_image_path


            # TODO apply a print-safe area to the image (kinda tricky)

            # If the tile index is negative this tile needs to be flipped
            if [ ${page_tiles[$tile_index]} -lt 0 ]; then
                convert $temp_image_path -flip -flop $temp_image_path
            fi


            append_columns_command="$append_columns_command $temp_image_path"

        done
        append_columns_command="$append_columns_command +append row$row_num$extension"
        clean_command="$clean_command row$row_num$extension"
        echo $append_columns_command
        eval $append_columns_command

        append_rows_command="$append_rows_command row$row_num$extension"
    done
    append_rows_command="$append_rows_command -append page$page_num$extension"
    echo $append_rows_command
    eval $append_rows_command
done

# Delete intermediate files
echo $clean_command
eval $clean_command

# TODO convert {output} -colorspace Gray if specified

# TODO convert all pages into a PDF
# TODO generate address labels for shipping to an audience defined in a text
# file

# TODO calculate printing and postage cost
